内存：总结

	Types of memory

						   dirty           clean
					|----------------|----------------|
					|				 |				  |
		private		|		bad	 	 |		okay	  |
					|				 |				  |
					|----------------|----------------|
					|				 |				  |
		shared      |		good	 |		best	  |
					|				 |				  |
					|----------------|----------------|


	Java虚拟机内存：
									|---------------------------------------------------------------|
									|				  运行时数据区									|
									|  |------------------| |----------------------------------|    |
									|  |				  | |  			     |				   |	|
									|  |	方法区		  | |	  虚拟机栈	 |	  本地方法栈	   |	|
									|  |				  | |				 |				   |	|
		 由所有线程共享的区域<——————	|<<|------------------| |----------------------------------|>>>>|————>线程隔离的区域
									|  |				  | |								   |	|
									|  |	堆（Heap）	  | |			 程序计数器			   |	|
									|  |				  | |								   |	|
									|  |------------------| |----------------------------------|	|
									|																|
									|---------------------------------------------------------------|
									|																|
									|																|
									|																|
									|																|
									|																|
									|																|
									|---------------------------------------------------------------|



		程序计数器：0、一块较小的内存空间，可以看作是当前线程代码执行的行号指示器。
				   1、为了线程能够恢复正确的执行位置，每条线程都需要一个独立的程序计数器。
				   2、各条线程之间计数互不影响、相互独立。 ---->线程私有

		虚拟机栈：  0、线程执行的模型 ----> 每个方法执行的同时都会创建 栈帧（Stack Frame）,用于存储 局部变量表、操作数栈、动态链接、方法出口  
				   1、通常来说栈指的是 虚拟机栈 中的 局部变量表
				   2、线程私有
				   3、可以动态扩展，扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常

				局部变量表：存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、
						   对象引用（reference类型，它不等于对象本身，可能是一个指向对象起止地址的引用指针，
						   也可能是指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress（指向一条字节码指令的地址）。

		本地方法栈：0、本地方法栈则为虚拟机栈使用到的Native方法服务

























网路：tcp | http 
view：

线程通信：
模块化：
RN：
设计模式：
C++:

-----------------------------------------------------------------------------------------------------------------------------------

Python:
序列
	通用项：
		索引、切片、相加、相乘、成员资格检查
		索引：
			0、访问单个元素
			1、序列中所有元素都有编号--从0开始递增
			2、可以使用索引来获取元素
			3、当使用负数索引时，Python将从最后一个元素开始指向第一个元素
		切片：
			0、简写
				0、访问特定范围里内的元素,包头不包尾
					>>> tag = "abcdefghijklmnopqrstuvwxyz"
					>>> tag[5:15]
					"fghijklmno"
				1、第一个索引指定的元素位于第二个索引指定的元素后面，结果为空序列
					>>> tag[-3:0]
					[]
				2、若切片结束于序列末尾，可省略第二个索引
					>>> tag[-3:]
					xyz
				3、若切片开始于序列开头，可省略第一个索引
					>>> tag[:3]
					abc
				4、若要复制整个序列，可将两个索引都省略
					>>> tag[:]
					"abcdefghijklmnopqrstuvwxyz"
			1、步长
				0、执行切片操作时通常省略另一个参数，即步长。在普通切片中，步长为1
					>>> num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
					>>> num[0:10:1]
					[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
				1、步长为2
					>>> num[0:10:2]
					[1, 3, 5, 7, 9]
				2、显式指定步长时，也可一使用简写
					>>> num[::4]
					[1, 5, 9]
				3、步长不能为0，否则无法向前移动
				4、步长可以为负数，即从右向左提取元素
					>>> num[8:3:-1]
					[9, 8, 7, 6, 5]

	--列表和元组

		--列表
			0、列表可以修改，可修改其内容，适用于需要中途添加元素的情形
			1、函数list
				可将任何序列作为list的参数
				>>>list('Hello')
				['H', 'e', 'l', 'l', 'o']
			2、基本的列表操作
				0、修改列表：给元素赋值
					>>> x=[1, 1, 1]
					>>> x[1] = 2;
					>>> x
					[1, 2, 1]
				1、删除元素：使用del语句
					>>> names = ['a', 'b', 'c', 'd', 'e']
					>>> del names[2]
					>>> names
					['a', 'b', 'd', 'e']
				2、给切片赋值
					0、给多个元素赋值
						>>> name = list('Perl')
						>>> name
						['P', 'e', 'r', 'l']
						>>> name[2:] = list('ar')
						>>> name
						['P', 'e', 'a', 'r']
					1、将切片替换为长度与其不同的序列
						>>> name = list('Perl')
						>>> name[1:] = list('ython')
						>>> name
						['P', 'y', 't', 'h', 'o', 'n']
					2、给多个元素赋值，并在不替换原有元素的情况下插入新元素
						>>> numbers = [1, 5]
						>>> numbers[1:1] = [2, 3, 4]
						>>> numbers
						[1, 2, 3, 4, 5]
					3、替换一个空切片
						>>> numbers = [1, 2, 3, 4, 5]
						>>> numbers[1:4] = [];
						>>> numbers
						[1, 5]
			2.3.3 列表方法
				0、方法是与对象联系紧密的函数，调用方式如下：
					object.method(arguments)
				1、append
					用于将一个对象附加到列表末尾,就地修改列表，不会返回修改后的新列表，而是直接修改旧列表
						>>> lst = [1, 2, 3]
						>>> lst.append(4)
						>>> lst
						[1, 2, 3, 4]
				2、clear
					就地清空列表
						>>> lst = [1, 2, 3]
						>>> lst.clear()
						>>> lst
						[]
				3、copy
					复制列表
						>>> a = [1, 2, 3]
						>>> n = a.copy()
						>>> b[1] = 4
						>>> a
						[1, 2, 3]
						>>>b
						[1, 4, 3]
				4、count
					计算指定元素在列表中出现的次数
						>>>['to', 'be', 'or', 'not', "to", "be"].count('to')
						2
						>>> x = [[1, 2], 1, 1, [2, 1, [1, 2]]]
						>>> x.count(1)
						2
						>>> x.count([1, 2])
						1
				5、extend
					能够同时将多个值附加到列表末尾，仅修改被扩展队列，不返回新的队列
						>>> a = [1, 2, 3]
						>>> b = [4, 5, 6]
						# 拼接返回一个新序列
						>>> a + b
						[1, 2, 3, 4, 5, 6]
						>>> a
						[1, 2, 3]
						# extend不返回新的队列
						>>> a.extend(b)
						>>> a
						[1, 2, 3, 4, 5, 6]
				6、index
					在列表中查找指定值第一次出现的索引
						>>> knight = ['We', 'are', 'the', 'knights', 'who', 'say', 'ni']
						>>> knights.index('who')
						4
				7、insert
					方法insert用于将一个对象插入列表
						>>> numbers = [1, 2, 3, 4, 5, 6, 7]
						>>> numbers.insert(3,'four')
						>>> numbers
						[1, 2, 3, 'four', 5, 6, 7]
				8、pop
					0、从列表删除一个元素，并返回这一元素
						>>> x = [1, 2, 3]
						>>> x.pop()
						3
						>>> x
						[1, 2]
						>>> x.pop(0)
						1
						>>> x
						[2]
					1、pop是唯一即修改列表又返回一个非None值的列表方法
					2、使用pop可以实现一种常见的数据结构 --- 栈(stack：后进先出) 
						push 和 pop 是大家普遍接受的两种栈操作（加入和取走）的名称，Python没有push，但可以使用append代替
							>>> x = [1,2,3]
							>>> x.append(x.pop())
							>>> x
							[1, 2, 3]
				9、remove
					用于删除第一个为指定值的元素，就地修改无返回值
						>>> x = ['to', 'be', 'or', 'not', 'to', 'be']
						>>> x.remove('be')
						>>> x
						['to', 'or', 'not', 'to', 'be']
				10、reverse
					按相反的顺序排列列表中的元素
						>>> x = [1, 2, 3]
						>>> x.reverse()
						>>> x
						[3, 2, 1]
				11、sort
					用于列表就地排序，无返回值
						>>> x = [4, 6, 2, 1, 7, 9]
						>>> x.sort()
						>>> x
						[1, 2, 4, 6, 7, 9]
				12、sorted
					用于列表排序，有返回值
						>>> sorted('Python')
						['P', 'h', 'n', 'o', 't', 'y']
				13、高级排序
					方法sort接受两个可选参数：key 和 reverse
						0、key
							0、可为自定义函数
							1、用它来为每个元素创建一个键，再根据这些键对元素进行排序
								>>> x = ['aardvark', 'abalone', 'acme', 'add', 'aerate']
								>>> x.sort(key=len)
								>>> x
								['add', 'acme', 'aerate', 'abalone', 'aardvark']
						1、reverse
							是否按相反的顺序对列表进行排序，只需指定其为一个真值（True或False）
								>>> x = [4, 6, 2, 1, 7, 9]
								>>> x.sort(reverse=True)
								>>> x
								[9, 7, 6, 4, 2, 1]

		--元组



JS:
Java基础：
